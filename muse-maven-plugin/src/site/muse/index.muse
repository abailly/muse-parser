#title Muse maven plugin
#author Arnaud Bailly - abailly@oqube.com

* Plugin's documentation

The =muse-maven-plugin=  aims at leveraging emacs-muse format (and its
environment) for providing a simple and efficient [[http://www.oqube.com/projects/muse-java/literate-muse/index.html][literate programming]]
environment: Given a directory containing *literate muse* source files,
it can produces two set of files:
 1. Source code extracted from special sections in the literate files,
 2. Documentation as *muse* formatted files in the project's site (*optional*).

Basic usage is quite simple and follows standard maven
plugins practice:
 1. add the plugin's reference (and possibly configuration) to your POM,
 2. write literate muse sources,
 3. build the project using maven's standard goals.

Example of the output produced by the plugin can be found on the
[[http://www.oqube.com/projects/patchwork/coverage-sample.html][Patchwork]].

** Plugin configuration 

Here is a sample configuration for muse-maven-plugin:

<example>
  <build>
    <plugins>
      <plugin>
	<groupId>oqube.muse</groupId>
	<artifactId>muse-maven-plugin</artifactId>
	<configuration>
	  <source>src/test/resources/test01</source>
	  <excludes>
	    <exclude>.*~</exclude>
	    <exclude>.*/#.*</exclude>
	    <exclude>.*/\..*</exclude>
	  </excludes>
	  <sourceOutput>target/generated-sources/lit</sourceOutput>
	  <docOutput>target/site/</docOutput>
	  <format>xhtml</format>
	  <multifile>true</multifile>
    	</configuration>
      </plugin>
    </plugins>
 </build>
</example>

The details of configurable parameters is available from standard
[[plugin-info.html][plugin's documentation]].

#literate_programming
* Literate programming and Maven

zMaven is a great tool for structuring projects and producing artifacts
and up-to-date documents and reports from source code. While literate
programming is not suited for producing and documenting all the code
in a software project, it may be very useful for various common
programming tasks:
 - **explaining in details an algorithm** which is central to the code
   being written. For example, if you write software for financial
   contracts evaluation, it may help going literate for detailed documentation
   of the evaluation algorithm used,
 - **commenting an example** program that uses a somewhat complex library,
 - **proof-of-concept** of some idea developed as an essay,
 - **test cases** documentation. This may be the same niche as [[http://fitnesse.org/][FitNesse]] in
   different shape.

