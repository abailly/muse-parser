#title OQube weblog
#author Arnaud Bailly
#description Some feed by oqube

* 20080929: Testing OQube web site

Started to write tests for OQube's site that could be run under CI to
ensure proper operation of the site. First test written is a spider
that checks all links collected from the web pages traversed by the
site. This test uses code from [[http://www.jeffheaton.com/source][Jeff Heaton]] web sites for a simple
spider. For the moment, it is sophisticated enough for my needs.

I ran into a problem reported [[http://forum.mediamaster.com/viewtopic.php?t=619&sid=7f3da85cdcce9b67ccc9c400e10e95bb][here]] while checking URL from Ubuntu web
site using HTTPS. Looks like Sun's default cacerts file is missing
some useful certificates.

I also want to setup some load and performance testing. The problem is
how to setup a meaningful test for such a thing ? I looked at various
tools for web application testing:
 - [[http://www.hpl.hp.com/research/linux/httperf/][HttPerf]] is a "simple" command-line oriented tool, running on
   various platforms from native code. It is simple to setup:
<example>
sudo aptitude install httperf
</example>
   and produces results like: 
<example>
$> httperf --hog --server www.oqube.net --num-conn 1000 --ra 70\
   --timeout 5
httperf --hog --timeout=5 --client=0/1 --server=www.oqube.net --port=80 --uri=/ --rate=70 --send-buffer=4096 --recv-buffer=16384 --num-conns=1000 --num-calls=1
Maximum connect burst length: 5

Total: connections 1000 requests 619 replies 619 test-duration 19.279 s

Connection rate: 51.9 conn/s (19.3 ms/conn, <=230 concurrent connections)
Connection time [ms]: min 119.9 avg 1229.7 max 4529.6 median 1209.5 stddev 868.4
Connection time [ms]: connect 636.6
Connection length [replies/conn]: 1.000

Request rate: 32.1 req/s (31.1 ms/req)
Request size [B]: 64.0

Reply rate [replies/s]: min 32.6 avg 40.7 max 45.6 stddev 7.1 (3 samples)
Reply time [ms]: response 590.6 transfer 2.5
Reply size [B]: header 172.0 content 1884.0 footer 0.0 (total 2056.0)
Reply status: 1xx=0 2xx=619 3xx=0 4xx=0 5xx=0

CPU time [s]: user 0.21 system 14.00 (user 1.1% system 72.6% total 73.7%)
Net I/O: 66.5 KB/s (0.5*10^6 bps)

Errors: total 381 client-timo 381 socket-timo 0 connrefused 0 connreset 0
Errors: fd-unavail 0 addrunavail 0 ftab-full 0 other 0
</example>
 - [[http://grinder.sourceforge.net/links.html][The Grinder]] is a more sophisticated tool written in Java, that
   provides a distributed load and performance testing architecture,
   together with scriptable sessions (in Jython), a console view, and
   various tools for analyzing results and produce graphs from it. 
 - will try to explore more at
   http://www.opensourcetesting.org/performance.php when given some time

* 20080917: Interesting variation around Form validation problem

On a recent [[http://rickyclarkson.blogspot.com/2008/09/implementing-builder-pattern-in-java.html][post]], Ricky  CLarkson implements constraints on data
fields using a builder pattern: fields are declared using a
combination of filter (Parameter) objects that apply certain
constraints. Then an object is constructed with Builder pattern that
checks appropriate constraints and throws unchecked exception upon
error. 

* 20080909: Dojo de lundi

Un dojo inspiré de [[http://blog.tmorris.net/haskell-scala-java-7-functional-java-java][Tony Morris]]: comment analyser une chaîne de
caractères composée de paires de parenthèses et crochets équilibrés ?


* 20080909: Builder Tester agent

Started working on the **tester** agent, first laying out basic
infrastructure for executing JUnit tests: wrapping JUnitCore executor
so that test cases get detected by the framewok, while handling class
loading issues. 

Test executions is OK, both for failures and successes, but I suspect
reporting is rather lame. This shall be improved later on. My goal is
to reach rapidly a state where:
 - tests are automatically executed after succesful compilation,
   providing instantaneous feedback
 - only needed tests are executed depending upon the modified files:
   this will be maintained using openjgraph's dependency graph
   augmented with files dependencies
 - things are integrated into the graphical monitor
 - paths parameters can be configured easily using properties files at
   application's startup
