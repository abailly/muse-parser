#title Mesurer la qualité : Les métriques de conception OO
#author Arnaud Bailly


L'utilisation de métriques ou mesures suppose un accord préalable sur
la définition et le sens de chaque mesure utilisée. Il n'existe
aucune mesure purement objective susceptible de fournir une
caractérisation de la qualité d'un logiciel. Même des mesures
apparemment anodines et objectives telles que le nombre de lignes de
code non commentées sont sujettes à interprétation (dans ce cas
particulier, sur le format de mise en page adopté). 

L'application stricte de mesure à par ailleurs pour effet de
transformer celle-ci en *prophétie auto-réalisatrice* : l'équipe de
développement, consciemment ou non, fera en sorte de se conformer à
l'objectif quantitatif attendu. Cet effet peut induire par ricochets
une moindre attention à d'autres facteurs concourrant à la qualité du
logiciel. 

Une mesure doit donc s'insérer dans un cadre d'analyse global est être
un élément d'une évaluation de la qualité du logiciel produit parmi
d'autres. 


* Norme IEEE-982.1-1988

*IEEE Standard Dictionary of Measures to Produce Reliable Software*.

Les mesures sont classés en:
 - mesures produit : mesures de fiabilité directement tirés du
   logiciel en cours de développement ou développé: 
   1. Erreurs, défauts, échecs: mesure direct du nombre de mauvais
      fonctionnement observé (qu'est ce qu'un défaut ?)
   2. Taux d'erreur, MTTF :  défauts en fonction du temps
   3. Croissance de fiabilité : estimation de l'évolution de la
      probabilité d'absence d'erreur en fonction du temps et de
      l'effort de test
   4. Défauts résiduels : 
   5. Complétude et consistence : évaluation de la présence de tous
      les constituants nécessaires au fonctionnement du logiciel
   6. Complexité 
 - mesures process : mesurent lea gestion du développement du logiciel
   1. Contrôle par le management 
   2. Couverture 
   3. Risques, bénéfices

La norme distingue les mesures dites *primitives* (qui sont directement
calculées à partir de l'application: code source, tests opérationnels,
rapports d'exécution) des mesures dites *dérivées*. 

Ces mesures sont essentiellement liées à l'évaluation de la fiabilité
du logiciel ou du système produit et ne s'intéressent pas
nécessairement à d'autres caractéristiques. Le modèle de développement
utilisé est implicitement un modèle en cascade ou assimilé.

L'utilisation de ces différentes mesures suppose la mise en place
d'une infrastructure de reporting et d'analyse, incluant en
particulier un suivant dans le temps et une classification très
précise des différents éléments du logiciel. 

* Métriques orienté-objets

** Taille

 - nombre de classes 
 - nombre de méthodes 

** Abstraction

Références ::
 - http://metrics.sourceforge.net/
 - http://www.objectmentor.com/resources/articles/oodmetrc.pdf
 - http://www.jot.fm/issues/issue_2006_11/article5.pdf
 - http://citeseer.ist.psu.edu/rd/5509313%2C701430%2C1%2C0.25%2CDownload/http%3AqSqqSqwww.kaner.comqSqpdfsqSqmetrics2004.pdf

Ces *mesures* ont pour but de fournir des critéres quantitatifs pour
l'évaluation de la qualité des composants orientés-objets. 

OO Metrics (calculée par rapport à un package en Java) ::
 - couplage afférent  =Ca=: nombre de classes dépendants du package
 - couplage efférent =Ce=: nombre de classes extérieures dont dépend ce package
 - instabilité =I=: <code>I= Ce / (Ca + Ce)</code>
 - niveau d'abstraction =A=: % de classes abstraites dans le package

Ces métriques ont pour but de définir une *bonne conception* objet en
faisant en sorte que les composants du code dépendent d'abstraction
plutôt que d'implantation, donc de code *stable* plutôt que de code
instable et sujet à changements.

** Héritage 

Mesure des qualité structurelles de l'utilisation de l'héritage. 

 - nombre d'enfants par classe
 - profondeur de l'arbre d'héritage
 - nombres de méthodes surchargées

* Complexité 

** Taille 

Mesure primitive de la complexité: taille du code. Plus un code est
gros, plus il sera difficile à comprendre et a priori donc
complexe. Taille du code est une mesure simple, directe, efficace. 

 - nombre de lignes de code: par classe, par méthode

** Complexité cyclomatique 

nombre de McCabe, ou complexité de McCabe.

Mesure de la complexité du code d'une méthode ou plus généralement
d'une application à partir d'une propriété structurelle du grapdhe de
contrôle appelée *nombre cyclomatique*. Le nombre cyclomatique pour un
graphe dirigé G(S,A) est égal à =|A| - |S| + p= où =p= est le nombre de
*composantes fortement connexes*. Dans le cas du graphe de contrôle d'un
code, le nombre de McCabe est le nombre cyclomatique de ce graphe en
considérant que **tout le graphe est fortement connexe** (la fin de la
méthode est connectée au début pour signifier la possibilité d'appels
multiples et récursifs). 

Plus simplement, ce nombre est donc le nombre d'arcs moins le nombre
de noeuds du graphe plus un. Une complexité de McCabe de 1 représente
une mèthode parfaitement linéaire. Ce nombre augmente avec
l'utilisation de conditions et de boucles: on le définit aussi comme
le nombre de branchements (binaires) d'un programme. Plus la
complexité est élevée, plus le nombre de cas de tests nécessaires à
couvrir tous les chemins d'ex
exponentiellement).
