/* The following code was generated by JFlex 1.4.1 on 27/09/06 22:12 */

/************************************************************************
* HASKEL 98 Lexical Analyzer
* Derived from :
* -- A Cactus representation of the Haskell grammar from the Haskell 98 report,
* -- starting with the Context-Free Syntax from appendix B.4, followed by
* -- rules from Lexical Syntax from appendix B.2.
* -- (Haskell layout rules are not represented.)
* Author : Arnaud Bailly
* Version : $Id$
**************************************************************************/

package oqube.jhighlight.haskell;

import java.io.Reader;
import java.io.IOException;
import java.util.StringTokenizer;
import java.util.logging.Logger;
import com.uwyn.jhighlight.highlighter.ExplicitStateHighlighter;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 27/09/06 22:12 from the specification file
 * <tt>jhighlight-ext/src/main/java/oqube/jhighlight/haskell/Haskell</tt>
 */
public class HaskellHighlighter implements ExplicitStateHighlighter {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 128;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_COMMENT = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\10\0\1\17\1\17\1\20\1\0\1\17\1\21\22\0\1\17\1\57"+
    "\1\11\3\7\1\16\1\13\1\10\1\10\1\7\1\71\1\10\1\56"+
    "\1\25\1\7\1\66\7\1\2\4\1\12\1\10\1\63\1\61\1\62"+
    "\1\7\1\57\1\50\3\5\1\54\1\65\2\2\1\52\4\2\1\47"+
    "\1\67\4\2\1\51\1\2\1\53\1\2\1\70\2\2\1\10\1\22"+
    "\1\10\1\7\1\60\1\60\1\41\1\15\1\6\1\27\1\32\1\45"+
    "\1\46\1\34\1\44\2\3\1\31\1\26\1\42\1\23\1\40\1\3"+
    "\1\35\1\43\1\36\1\30\1\14\1\33\1\24\1\37\1\3\1\55"+
    "\1\57\1\64\1\60\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\2\4\1\5\1\6\1\5"+
    "\1\7\1\1\1\10\1\11\1\7\1\4\1\7\11\4"+
    "\2\3\1\6\3\7\2\6\1\3\1\2\2\12\2\0"+
    "\2\4\1\0\1\2\1\5\1\13\1\6\2\0\1\14"+
    "\11\4\1\14\2\3\1\15\1\5\1\3\2\0\1\16"+
    "\1\2\1\3\2\4\1\2\7\0\12\4\2\3\1\0"+
    "\2\17\1\3\2\2\2\0\7\4\1\3\2\2\1\0"+
    "\3\4\1\14\1\3\2\4\1\14\1\4";

  private static int [] zzUnpackAction() {
    int [] result = new int[120];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\u0122\0\u015c\0\u0196"+
    "\0\164\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8\0\u0196\0\u02f2"+
    "\0\u032c\0\u0366\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488\0\u04c2"+
    "\0\u04fc\0\u0536\0\u0570\0\u05aa\0\u05e4\0\u061e\0\164\0\u0658"+
    "\0\u0196\0\u0692\0\u06cc\0\u0706\0\164\0\u0740\0\u077a\0\u07b4"+
    "\0\u07ee\0\u0828\0\u0862\0\u0196\0\u089c\0\u08d6\0\u08d6\0\u0910"+
    "\0\u094a\0\u0122\0\u0984\0\u09be\0\u09f8\0\u0a32\0\u0a6c\0\u0aa6"+
    "\0\u0ae0\0\u0b1a\0\u0b54\0\u0b8e\0\u0bc8\0\u0c02\0\164\0\u0c3c"+
    "\0\u0c76\0\u0cb0\0\u0cea\0\164\0\u0d24\0\u0d5e\0\u0d98\0\u0dd2"+
    "\0\164\0\u0e0c\0\u0e46\0\u0e80\0\u0eba\0\u0ef4\0\u0f2e\0\u0f68"+
    "\0\u0fa2\0\u0fdc\0\u1016\0\u1050\0\u108a\0\u10c4\0\u10fe\0\u1138"+
    "\0\u1172\0\u11ac\0\u11e6\0\u1220\0\u125a\0\164\0\u125a\0\u1294"+
    "\0\u0cb0\0\u0cea\0\u12ce\0\u1308\0\u1342\0\u137c\0\u13b6\0\u13f0"+
    "\0\u142a\0\u1464\0\u149e\0\u14d8\0\350\0\u1512\0\u1512\0\u154c"+
    "\0\u1586\0\u15c0\0\u15fa\0\u1634\0\u166e\0\u16a8\0\350\0\u16e2";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[120];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\4\1\5\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\2\6\1\10\1\15\2\16"+
    "\1\17\1\20\1\6\1\21\1\22\1\23\1\6\1\24"+
    "\1\25\1\26\2\6\1\27\2\6\1\30\1\31\1\6"+
    "\1\32\2\6\1\33\1\5\1\34\3\5\1\35\1\36"+
    "\1\17\1\37\1\40\1\41\1\42\1\11\1\43\1\44"+
    "\2\5\1\10\56\45\1\46\13\45\73\0\1\4\2\0"+
    "\1\4\20\0\1\47\40\0\1\4\4\0\6\5\4\0"+
    "\3\5\5\0\2\5\1\50\27\5\10\0\4\5\2\0"+
    "\6\6\4\0\3\6\5\0\2\6\1\0\27\6\10\0"+
    "\4\6\2\0\6\6\4\0\3\6\5\0\2\6\1\0"+
    "\3\6\1\51\7\6\1\52\13\6\10\0\4\6\10\0"+
    "\1\10\1\0\2\10\3\0\1\10\3\0\1\10\2\0"+
    "\1\10\30\0\2\10\1\0\3\10\5\0\1\10\7\53"+
    "\1\12\1\53\1\54\1\12\3\53\1\12\3\53\1\55"+
    "\2\53\1\12\30\53\2\12\1\53\3\12\5\53\1\12"+
    "\7\0\1\56\1\0\1\56\1\57\3\0\1\56\3\0"+
    "\1\56\2\0\1\56\30\0\2\56\1\0\3\56\5\0"+
    "\1\56\13\60\1\0\6\60\1\61\47\60\17\0\1\15"+
    "\72\0\2\16\51\0\6\6\4\0\3\6\5\0\2\6"+
    "\1\0\17\6\1\62\7\6\10\0\4\6\10\0\1\10"+
    "\1\0\2\10\3\0\1\10\3\0\1\10\2\0\1\17"+
    "\30\0\2\10\1\0\3\10\5\0\1\10\1\0\6\6"+
    "\4\0\3\6\5\0\1\63\1\6\1\0\27\6\10\0"+
    "\4\6\2\0\6\6\4\0\3\6\5\0\1\62\1\6"+
    "\1\0\4\6\1\64\6\6\1\65\13\6\10\0\4\6"+
    "\2\0\6\6\4\0\3\6\5\0\2\6\1\0\4\6"+
    "\1\66\22\6\10\0\4\6\2\0\6\6\4\0\3\6"+
    "\5\0\2\6\1\0\3\6\1\52\23\6\10\0\4\6"+
    "\2\0\6\6\4\0\3\6\5\0\2\6\1\0\6\6"+
    "\1\67\20\6\10\0\4\6\2\0\6\6\4\0\3\6"+
    "\5\0\2\6\1\0\6\6\1\70\2\6\1\71\15\6"+
    "\10\0\4\6\2\0\6\6\4\0\3\6\5\0\2\6"+
    "\1\0\15\6\1\62\11\6\10\0\4\6\2\0\6\6"+
    "\4\0\3\6\5\0\2\6\1\0\4\6\1\72\22\6"+
    "\10\0\4\6\2\0\6\6\4\0\3\6\5\0\2\6"+
    "\1\0\1\73\13\6\1\74\2\6\1\62\7\6\10\0"+
    "\4\6\2\0\6\5\4\0\3\5\5\0\2\5\1\50"+
    "\22\5\1\75\4\5\10\0\4\5\2\0\6\5\4\0"+
    "\3\5\5\0\2\5\1\50\7\5\1\76\17\5\10\0"+
    "\4\5\57\0\1\77\22\0\1\10\1\0\2\10\3\0"+
    "\1\10\3\0\1\10\2\0\1\10\30\0\1\100\1\10"+
    "\1\0\1\10\1\17\1\10\5\0\1\10\7\0\1\10"+
    "\1\0\2\10\3\0\1\10\3\0\1\10\2\0\1\10"+
    "\30\0\2\10\1\0\1\10\1\17\1\10\5\0\1\10"+
    "\7\0\1\10\1\0\2\10\3\0\1\10\3\0\1\10"+
    "\2\0\1\10\30\0\1\17\1\10\1\0\3\10\5\0"+
    "\1\10\1\0\6\5\4\0\3\5\5\0\2\5\1\50"+
    "\13\5\1\101\13\5\10\0\4\5\2\0\1\4\2\0"+
    "\1\4\16\0\1\102\1\103\1\47\40\0\1\4\1\102"+
    "\1\103\65\0\1\104\6\0\1\105\2\0\1\105\61\0"+
    "\1\105\5\0\1\106\1\6\1\0\1\106\1\6\1\10"+
    "\1\0\1\10\1\56\1\0\2\6\1\10\3\0\1\10"+
    "\2\6\1\10\21\6\6\106\1\0\2\10\1\0\3\10"+
    "\1\0\1\106\1\0\2\106\1\10\1\0\6\6\4\0"+
    "\3\6\5\0\2\6\1\0\13\6\1\107\13\6\10\0"+
    "\4\6\2\0\6\6\4\0\3\6\5\0\2\6\1\0"+
    "\15\6\1\110\11\6\10\0\4\6\1\0\11\53\1\111"+
    "\10\53\1\112\47\53\1\0\1\53\2\0\1\53\2\0"+
    "\1\10\1\0\1\12\1\10\3\53\1\12\1\113\2\0"+
    "\1\12\1\114\1\115\1\10\7\0\2\53\2\0\2\53"+
    "\2\0\1\53\10\0\2\10\1\0\3\10\2\0\1\53"+
    "\2\0\1\10\7\0\1\56\1\0\2\56\3\0\1\56"+
    "\3\0\1\56\2\0\1\56\30\0\2\56\1\0\3\56"+
    "\5\0\1\56\13\0\1\111\57\0\1\116\2\0\1\116"+
    "\4\0\1\60\1\0\4\60\3\0\1\60\1\117\1\120"+
    "\10\0\2\60\2\0\2\60\2\0\1\60\20\0\1\116"+
    "\4\0\6\6\4\0\3\6\5\0\2\6\1\0\1\6"+
    "\1\121\25\6\10\0\4\6\2\0\6\6\4\0\3\6"+
    "\5\0\2\6\1\0\7\6\1\122\7\6\1\123\7\6"+
    "\10\0\4\6\2\0\6\6\4\0\3\6\5\0\2\6"+
    "\1\0\10\6\1\124\16\6\10\0\4\6\2\0\6\6"+
    "\4\0\3\6\5\0\2\6\1\0\10\6\1\62\16\6"+
    "\10\0\4\6\2\0\6\6\4\0\3\6\5\0\2\6"+
    "\1\0\4\6\1\125\22\6\10\0\4\6\2\0\6\6"+
    "\4\0\3\6\5\0\2\6\1\0\4\6\1\126\22\6"+
    "\10\0\4\6\2\0\6\6\4\0\3\6\5\0\2\6"+
    "\1\0\12\6\1\110\14\6\10\0\4\6\2\0\6\6"+
    "\4\0\3\6\5\0\2\6\1\0\5\6\1\127\21\6"+
    "\10\0\4\6\2\0\6\6\4\0\3\6\5\0\2\6"+
    "\1\0\12\6\1\130\14\6\10\0\4\6\2\0\6\6"+
    "\4\0\3\6\5\0\2\6\1\0\15\6\1\131\1\6"+
    "\1\132\7\6\10\0\4\6\2\0\6\5\4\0\3\5"+
    "\5\0\2\5\1\50\23\5\1\133\3\5\10\0\4\5"+
    "\2\0\6\5\4\0\3\5\5\0\2\5\1\50\2\5"+
    "\1\134\24\5\10\0\4\5\1\0\7\135\1\100\1\135"+
    "\2\100\3\135\1\100\1\135\1\136\1\137\1\100\2\135"+
    "\1\100\30\135\2\100\1\135\3\100\5\135\1\100\1\0"+
    "\6\5\4\0\3\5\5\0\2\5\1\50\3\5\1\140"+
    "\23\5\10\0\4\5\2\0\1\141\64\0\1\141\4\0"+
    "\1\142\2\0\3\142\6\0\1\142\11\0\1\142\2\0"+
    "\1\142\6\0\1\142\3\0\1\142\2\0\1\142\3\0"+
    "\1\142\10\0\2\142\4\0\1\105\2\0\1\105\25\0"+
    "\1\143\21\0\1\143\11\0\1\105\4\0\6\106\4\0"+
    "\3\106\5\0\2\106\1\0\27\106\10\0\4\106\2\0"+
    "\6\6\4\0\3\6\5\0\2\6\1\0\15\6\1\30"+
    "\11\6\10\0\4\6\2\0\6\6\4\0\3\6\5\0"+
    "\2\6\1\0\4\6\1\62\22\6\10\0\4\6\2\0"+
    "\1\53\2\0\1\53\4\0\1\53\1\0\4\53\1\113"+
    "\2\0\1\53\1\114\1\115\10\0\2\53\2\0\2\53"+
    "\2\0\1\53\20\0\1\53\22\0\1\113\2\0\1\53"+
    "\50\0\1\53\64\0\1\53\4\0\1\53\2\0\3\53"+
    "\6\0\1\53\11\0\1\53\2\0\1\53\6\0\1\53"+
    "\3\0\1\53\2\0\1\53\3\0\1\53\10\0\2\53"+
    "\4\0\1\116\2\0\1\116\6\0\1\111\52\0\1\116"+
    "\4\0\1\60\64\0\1\60\4\0\1\144\2\0\3\144"+
    "\6\0\1\144\11\0\1\144\2\0\1\144\6\0\1\144"+
    "\3\0\1\144\2\0\1\144\3\0\1\144\10\0\2\144"+
    "\4\0\6\6\4\0\3\6\5\0\2\6\1\0\2\6"+
    "\1\145\24\6\10\0\4\6\2\0\6\6\4\0\3\6"+
    "\5\0\2\6\1\0\16\6\1\146\10\6\10\0\4\6"+
    "\2\0\6\6\4\0\3\6\5\0\2\6\1\0\13\6"+
    "\1\147\13\6\10\0\4\6\2\0\6\6\4\0\3\6"+
    "\5\0\2\6\1\0\13\6\1\62\13\6\10\0\4\6"+
    "\2\0\6\6\4\0\3\6\5\0\2\6\1\0\7\6"+
    "\1\110\17\6\10\0\4\6\2\0\6\6\4\0\3\6"+
    "\5\0\2\6\1\0\14\6\1\62\12\6\10\0\4\6"+
    "\2\0\6\6\4\0\3\6\5\0\2\6\1\0\10\6"+
    "\1\150\16\6\10\0\4\6\2\0\6\6\4\0\3\6"+
    "\5\0\1\151\1\6\1\0\27\6\10\0\4\6\2\0"+
    "\6\6\4\0\3\6\5\0\2\6\1\0\10\6\1\152"+
    "\16\6\10\0\4\6\2\0\6\6\4\0\3\6\5\0"+
    "\2\6\1\0\16\6\1\153\10\6\10\0\4\6\2\0"+
    "\6\5\4\0\3\5\5\0\2\5\1\50\24\5\1\154"+
    "\2\5\10\0\4\5\2\0\6\5\4\0\3\5\5\0"+
    "\2\5\1\50\4\5\1\155\22\5\10\0\4\5\1\0"+
    "\20\135\1\136\1\137\50\135\1\0\6\5\4\0\3\5"+
    "\5\0\2\5\1\50\15\5\1\134\11\5\10\0\4\5"+
    "\2\0\1\156\2\0\1\156\51\0\1\157\7\0\1\156"+
    "\2\0\1\157\1\0\1\144\2\0\3\144\4\0\1\111"+
    "\1\0\1\144\11\0\1\144\2\0\1\144\6\0\1\144"+
    "\3\0\1\144\2\0\1\144\3\0\1\144\10\0\2\144"+
    "\4\0\6\6\4\0\3\6\5\0\2\6\1\0\3\6"+
    "\1\110\23\6\10\0\4\6\2\0\6\6\4\0\1\6"+
    "\1\160\1\6\5\0\2\6\1\0\27\6\10\0\4\6"+
    "\2\0\6\6\4\0\3\6\5\0\2\6\1\0\2\6"+
    "\1\161\24\6\10\0\4\6\2\0\6\6\4\0\3\6"+
    "\5\0\2\6\1\0\11\6\1\71\15\6\10\0\4\6"+
    "\2\0\6\6\4\0\3\6\5\0\2\6\1\0\7\6"+
    "\1\66\17\6\10\0\4\6\2\0\6\6\4\0\3\6"+
    "\5\0\2\6\1\0\13\6\1\162\13\6\10\0\4\6"+
    "\2\0\6\6\4\0\3\6\5\0\1\6\1\163\1\0"+
    "\27\6\10\0\4\6\2\0\6\5\4\0\3\5\5\0"+
    "\2\5\1\50\25\5\1\164\1\5\10\0\4\5\2\0"+
    "\1\156\2\0\1\156\61\0\1\156\4\0\6\6\4\0"+
    "\3\6\5\0\2\6\1\0\16\6\1\165\10\6\10\0"+
    "\4\6\2\0\6\6\4\0\3\6\5\0\2\6\1\0"+
    "\3\6\1\66\23\6\10\0\4\6\2\0\6\6\4\0"+
    "\3\6\5\0\2\6\1\0\14\6\1\166\12\6\10\0"+
    "\4\6\2\0\6\6\4\0\3\6\5\0\2\6\1\0"+
    "\3\6\1\62\3\6\1\62\17\6\10\0\4\6\2\0"+
    "\6\5\4\0\3\5\5\0\2\5\1\50\26\5\1\167"+
    "\10\0\4\5\2\0\6\6\4\0\3\6\5\0\2\6"+
    "\1\0\14\6\1\170\12\6\10\0\4\6\2\0\5\6"+
    "\1\110\4\0\3\6\5\0\2\6\1\0\27\6\10\0"+
    "\4\6\2\0\6\6\4\0\3\6\5\0\2\6\1\0"+
    "\20\6\1\62\6\6\10\0\4\6\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5916];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\5\1\1\11\25\1\1\11\5\1\1\11"+
    "\1\1\2\0\2\1\1\0\4\1\2\0\15\1\1\11"+
    "\2\1\2\0\1\11\4\1\1\11\7\0\14\1\1\0"+
    "\1\11\4\1\2\0\12\1\1\0\11\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[120];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */

  public static final int HASKELL_COMMENT = 1;

  public static final int HASKELL_LITERAL = 2;

  public static final int HASKELL_DELIMITER = 3;

  public static final int HASKELL_PLAIN = 4;

  public static final int HASKELL_KEYWORD = 5;

  public static final int HASKELL_CONOP = 6;

  public static final int HASKELL_CTOR = 7;

  public static final int HASKELL_OP = 8;

  public static final int HASKELL_VAR = 9;

  public static final int HASKELL_VAROP = 10;

  /** error manager */
  private Logger log = Logger.getLogger("fidl.parser.jaskell");

  /* get line number */
  public int getLine() {
    return yyline;
  }
  
 /* set start line number */
  public void setLine(int sl) {
	yyline = sl;
  }

  public int getColumn() {
    return yycolumn;
  }

  public void setColumn(int col) {
    yycolumn = col;
  }
    
  public void yyerror(String msg) {
    StringBuffer err = new StringBuffer("jaskell- ");
     err.append('(').append(yyline).append(',').append(yycolumn).append(") ")
      .append(" : ")
      .append(msg);

    log.severe(err.toString());
  }
	/* Highlighter implementation */
	
	public int getStyleCount()
	{
		return 10;
	}
	
	public byte getStartState()
	{
		return YYINITIAL+1;
	}
	
	public byte getCurrentState()
	{
		return (byte) (yystate()+1);
	}
	
	public void setState(byte newState)
	{
		yybegin(newState-1);
	}
	
	public byte getNextToken()
	throws IOException
	{
		return (byte) yylex();
	}
	
	public int getTokenLength()
	{
		return yylength();
	}
	
	public void setReader(Reader r)
	{
		this.zzReader = r;
	}

	public HaskellHighlighter()
	{
	}



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public HaskellHighlighter(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public HaskellHighlighter(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 168) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 14: 
          { yybegin(YYINITIAL); yycolumn = yychar;  return HASKELL_COMMENT;
          }
        case 16: break;
        case 2: 
          { yycolumn = yychar;  return HASKELL_LITERAL;
          }
        case 17: break;
        case 6: 
          { yycolumn = yychar; return HASKELL_DELIMITER;
          }
        case 18: break;
        case 8: 
          { yycolumn = yychar; return HASKELL_PLAIN;
          }
        case 19: break;
        case 1: 
          { return HASKELL_PLAIN;
          }
        case 20: break;
        case 9: 
          { yychar = 0;  return HASKELL_PLAIN;
          }
        case 21: break;
        case 12: 
          { yycolumn = yychar;  return HASKELL_KEYWORD;
          }
        case 22: break;
        case 11: 
          { yycolumn = yychar;  return HASKELL_CONOP;
          }
        case 23: break;
        case 3: 
          { yycolumn = yychar;  return HASKELL_CTOR;
          }
        case 24: break;
        case 15: 
          { yycolumn = yychar;  return HASKELL_COMMENT;
          }
        case 25: break;
        case 10: 
          { return HASKELL_COMMENT;
          }
        case 26: break;
        case 7: 
          { yycolumn = yychar;  return HASKELL_OP;
          }
        case 27: break;
        case 4: 
          { yycolumn = yychar;  return HASKELL_VAR;
          }
        case 28: break;
        case 5: 
          { yycolumn = yychar;  return HASKELL_VAROP;
          }
        case 29: break;
        case 13: 
          { yycolumn = yychar;  yybegin(IN_COMMENT); return HASKELL_COMMENT;
          }
        case 30: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
